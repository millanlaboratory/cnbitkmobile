#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri July 28 14:02:52 2017

@author: Felix Bauer

Visual interface for BCI feedback to control robot
As opposed to previous versions no clues are given
and there is no time out
Threfore the user constantly is in control over feedback and robot
Space bar is used to start/stop robot motion
"""

import argparse
import sys
import os
from lxml import etree as et
import pygame as pg
import numpy as np
from pybci import key_logger as kl


#Settings:
#Rotation that corresponds to BCI value being 0 or 1 (in degrees)
max_rotation = 90
# Initial window height and width
s_width, s_height = 800, 800
#ratio of radius of inner and outer circle
rad_ratio = 0.8
#colors
black = [0,0,0]
blue = [30,60,255]
green = [0,150,0]
red = [230,0,0]
dark_grey = [90,90,90]
light_grey = [205,205,205]

#Parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('-x', help='path to XML file')
parser.add_argument('-t', help='Taskset, default: mi_bhbf')
parser.add_argument('-b', help='block, default: mi')
parser.add_argument('-a', help='ip address of loop, default: 127.0.0.1')
args = parser.parse_args()
path = args.x
tskst = args.t
block = args.b
iploop = args.a
if args.x == None:
    sys.exit('ERROR: No path to XML file given')
if args.t == None:
    #sys.exit('ERROR: No taskset given')
    print('WARNING: no taskset given, using default: bhbf_mi')
    tskst = 'mi_bhbf'
if args.b == None:
    #sys.exit('ERROR: No block given')
    print('WARNING: no block given, using default: mi')
    block = 'mi'
if args.a == None:
    iploop = '127.0.0.1'
    print 'WARNING: Default loop ip: %s' % (iploop)
else:
    print 'Loop ip: %s' % (iploop)

    

#Functions for communication with BCI loop    


def get_bci_val():
    if not go_on or not pg.display.get_init():
        return    
 
    while True:
        """
        if handle_events() == 'exit':
            return 'exit'
        elif handle_events() == '0':
            return 0.
        elif handle_events() == '1':
            return 1.
        """
        prob = bci.readTicClassProb(block, task_event)
        if prob != None:
            #Correct if probability for left task is being received
            if bci_inverse:
                prob = 1-prob
            return prob


def get_bci_class():
    """determine task that is being sent via TiC
       needed to determine left and right tasks
    """

    print('Obtaining BCI class')
    while True:
        #Obtain probability from TiC
        out = bci.readTicAllProb()
        if out != None:
            print('Successfull - Will read BCI probabilities for class {}'.format(out[0][:]))
            return out[0]


#functions for drawing on the window

def centered_rect(image, s_center_x, s_center_y):
    """return a rect object of the given image, with center in s_center_x, s_center_y"""
    if not go_on or not pg.display.get_init():
        return
    width, height = image.get_rect()[2], image.get_rect()[3]
    return [s_center_x - width/2, s_center_y - height/2, width, height]


#def ptr_update(bci_val0, cue=None, boom=None, hitrate=None):
def ptr_update(bci_val0, boom=None, task=None):
    """draw pointer, rotated according to bci_val, cue in center, 
       if boom != None pointer changes color accordingly or in case of timeout
       text is shown below pointer
    """
    
    if not go_on or not pg.display.get_init():
        return
    

    #Determine size of window and coordinates of center
    screen = pg.display.get_surface()
    s_center_x = screen.get_size()[0]/2
    s_center_y = screen.get_size()[1]/2
    
    screen.fill(black)
                                
    #Radii to draw lines and some of the circles
    outer_radius = pointer_grey.get_rect()[2]/2
    inner_radius = outer_radius*rad_ratio
    
    #Outer dark grey circle
    pg.draw.circle(screen, dark_grey, 
                       [int(s_center_x),int(s_center_y)], int(outer_radius), 0)

    #Rotate pointer according to bci value and change color if boom
    bci_val = np.clip(bci_val0, l_thr, r_thr)
    rotation = - (2*bci_val - 1) * max_rotation
    if boom == None: #or boom == 'time out':
        new_pointer = pg.transform.rotate(pointer_grey, rotation)
        state = 'forward'
    elif boom == 'left':
        new_pointer = pg.transform.rotate(pointer_blue, rotation)
        state = 'left'
    elif boom == 'right':
        new_pointer = pg.transform.rotate(pointer_red, rotation)   
        state = 'right' 

    if not robot_moving:
        state = 'stop'    

    #Determine rect (position and size) of pointer and draw it
    new_rect = centered_rect(new_pointer, s_center_x, s_center_y)
    screen.blit(new_pointer, new_rect)
       
    #Green rest line
    pg.draw.line(screen, green, [s_center_x, s_center_y - inner_radius], [s_center_x, s_center_y - outer_radius], 3)
    
    #Blue class 0-line
    angle0 = -(2*l_thr - 1) * max_rotation
    x0_out = -outer_radius*np.sin(np.pi*angle0/180.)
    y0_out = -outer_radius*np.cos(np.pi*angle0/180.)
    x0_in = rad_ratio*x0_out
    y0_in = rad_ratio*y0_out
    pg.draw.line(screen, blue, [s_center_x+x0_in,s_center_y+y0_in], [s_center_x+x0_out,s_center_y+y0_out], 3)
    
    #Red class 1-line
    angle1 = (2*r_thr - 1) * max_rotation
    x1_out = outer_radius*np.sin(np.pi*angle1/180.)
    y1_out = -outer_radius*np.cos(np.pi*angle1/180.)
    x1_in = rad_ratio*x1_out
    y1_in = rad_ratio*y1_out
    pg.draw.line(screen, red, [s_center_x+x1_in,s_center_y+y1_in], [s_center_x+x1_out,s_center_y+y1_out], 3)
    
    #Inner black circle
    pg.draw.circle(screen, black, [int(s_center_x),int(s_center_y)], int(inner_radius), 0)
    #Outer black ring to reduce flickering
    screen.blit(ring, centered_rect(ring, s_center_x, s_center_y))

    if task != None:
        text_font = pg.font.SysFont('lato', 70)
        text_surface = text_font.render('Task {}'.format(task), False, light_grey)
        screen.blit(text_surface, centered_rect(text_surface, s_center_x, s_center_y))
    else:
        #State
        screen.blit(state_dict[state], centered_rect(state_dict[state], s_center_x, s_center_y))

    pg.display.update()

    return None


#functions that the program goes through during the trials

#def boom_stage(bci_val, cue, boom_type):
def boom_stage(bci_val, boom_type,mode):
    """call ptr_update to draw pointer in boom, wait for given time"""
    
    if not go_on or not pg.display.get_init():
        return
    if mode != 'in_trial':
        t = 500
    else:
        t = t_boom
    time = pg.time.get_ticks()
    while pg.time.get_ticks() - time < t:
        if handle_events() == 'exit':
            #bci.sendTidEvent(evt+evtOff)
            return
        ptr_update(bci_val, boom_type)
    #bci.sendTidEvent(evt+evtOff)
    return


def feedback_update(mode='in_trial', task=None, control=None):
    """Update the pointer that indicates BCI value, 
        pass on events from handle_events() if necessary
        enter boom stage if threshold reached
        return continue if no special event happens"""
    
    if control == None:
        x = get_bci_val()
    else: x = float(control)
    
    if mode == 'cue':
        ptr_update(x, task=task)
    else:
        ptr_update(x)

    #When threshold passed during left/right task - boom 
    global feedback_running
    if x >= r_thr:
        if mode == 'in_trial':
            bci.sendTidEvent(evtCmdRgt)
            pg.time.wait(200)
        bci.sendTidEvent(evtCFeed+evtOff)
        feedback_running = False
        print('right threshold reached')
        boom_stage(x, 'right', mode)
        return #'right'
    elif x <= l_thr:
        if  mode =='in_trial':
            bci.sendTidEvent(evtCmdLft)
            pg.time.wait(200)
        bci.sendTidEvent(evtCFeed+evtOff)
        feedback_running = False
        print('left threshold reached')
        boom_stage(x, 'left',mode)
        return #'left'
    else:
        return #'continue'


def make_window(width, height, bci_val, boom=None):
    """Create a window with given size, resize if already exists, 
       draw pointer in center, pass on bci_val, cue and boom to ptr_update
    """
    pg.display.set_mode((width, height), pg.RESIZABLE)
    pg.display.set_caption('Feedback')
    ptr_update(bci_val, boom)

def fullscreen(bci_val, boom=None):
    """Maximize window if not maximized yet. If already max.ed then make smaller"""
    global maximized_window
    pg.display.quit()
    pg.display.init()
    if maximized_window:
        make_window(s_width, s_height, bci_val, boom)
    else:
        make_window(0, 0, bci_val, boom)
    maximized_window = not maximized_window

def handle_events():
    """change window or exit program if requested, for other commands return corresponding strings"""
    global go_on    
    if not pg.display.get_init():
        go_on = False
        return 'exit'
    for event in pg.event.get():
        #Exit program when closing window or hitting escape
        if (event.type  == pg.QUIT 
        or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE)):
            print('EXIT')
            bci.sendTidEvent(evtCmdStop)
            go_on = False
            pg.quit()
            return 'exit'
        #Number for choosing task
        elif event.type == pg.KEYDOWN and event.key in number_events[:n_tasks]:
            for i in range(n_tasks):
                if event.key == number_events[i]:
                    return i+1
        #Change window size
        elif event.type == pg.VIDEORESIZE:
            w, h = event.size
            make_window(w, h, 0.5)
            return None
        #Maximize window when pressing f
        elif event.type == pg.KEYDOWN and event.key == pg.K_f:
            fullscreen(0.5, None)
            return None
        #End trial, make robot pause
        elif event.type == pg.KEYDOWN and event.key == pg.K_SPACE:
            return 'end trial'
        #Simulate bci value 0 or 1
        elif event.type == pg.KEYDOWN and event.key == pg.K_v:
            return '0'
        elif event.type == pg.KEYDOWN and event.key == pg.K_b:
            return '1'



def read_xml():    
    """read settings from XML file"""
    
    try:
        xml = et.parse(path).getroot()
    except IOError:
        sys.exit('ERROR: XML file {} not found'.format(path))
    
    #make sure that given block and taskset exist
    if xml.find('.//{}'.format(block)) == None:
        sys.exit('ERROR: block {} not found in XML file'.format(block))
    taskset = xml.find('./tasksets/{}'.format(tskst))
    if taskset == None:
        sys.exit('ERROR: taskset {} not found in XML file'.format(tskst))
    
    #durations
    global t_boom, t_cue
    try:
        times = xml.find('./protocol/{}/trial'.format(block))
        t_boom = float(times.findtext('boom'))
        t_cue = float(times.findtext('cue'))
    except (AttributeError, TypeError):
        sys.exit('ERROR: problem while determining durations from XML file')
    
    #Identify tasks
    global task_event, bci_inverse
    task_event = get_bci_class()
    try:
        right_task = taskset.find('./class[@id="0"]').attrib['key']
        left_task = taskset.find('./class[@id="1"]').attrib['key']
        #rest_task = taskset.find('./class[@id="2"]').attrib['key']
    except (AttributeError, KeyError):
        sys.exit('ERROR: not all class ids were found in XML file')
    try:
        event_element = xml.find('./tasks').xpath(
                    './/gdfevent[text()="{:#06x}"]'.format(int(task_event)))
        bci_task = event_element[0].getparent().tag
    except (AttributeError, IndexError):
        sys.exit('ERROR: problem while determining tasks: cannot find BCI class in XML file')
    #if task corresponds to left, get_bci_val will correct for that
    if bci_task == right_task:
        bci_inverse = False
    elif bci_task == left_task:
        bci_inverse = True
        print("Class corresponds to left task - BCI probabilities will be inverted")
    else:
        sys.exit('ERROR: BCI probability does not correspond to given taskset')
    
    #identify GDF events and no of trials
    global evtCmdLft, evtCmdRgt, evtCmdStart, evtCmdStop, evtCmdResume, evtCmdPause, evtCFeed, evtTask0, evtOff, n_tasks
    try:
        evtCmdLft = int(xml.findtext('./device/gdfevents/ros_left'), 16)
        evtCmdRgt = int(xml.findtext('./device/gdfevents/ros_right'), 16)
        evtCmdStart = int(xml.findtext('./device/gdfevents/ros_start'), 16)
        evtCmdStop = int(xml.findtext('./device/gdfevents/ros_stop'), 16)
        evtCmdPause = int(xml.findtext('./device/gdfevents/ros_pause'), 16)
        evtCmdResume = int(xml.findtext('./device/gdfevents/ros_resume'), 16)
        evtCFeed = int(xml.findtext('./events/gdfevents/cfeedback'), 16)
        evtTask0 = int(xml.findtext('./online/{}/trials/gdfevent_task0'.format(block)), 16)
        evtOff = int(xml.findtext('./events/gdfevents/off'), 16)
        n_tasks = int(xml.findtext('./online/{}/trials/n_tasks'.format(block)), 16)
    except TypeError:
        sys.exit('ERROR: cannot find all required event ids in XML file')

    #thresholds
    global r_thr, l_thr
    try:
        r_thr = float(xml.findtext('.//threshold/{}'.format(right_task)))
        l_thr = 1-float(xml.findtext('.//threshold/{}'.format(left_task)))
    except TypeError:
        sys.exit('ERROR: problem while determining thresholds from XML file')
    
    print('Settings loaded from XML file')

def initialize_program():
    """Initialize keylogger object, list with trials and pygame, open window"""
    pg.init()
    #list of keyboard events that correspond to entering a number
    global number_events
    number_events = [pg.K_1,pg.K_2,pg.K_3,pg.K_4,pg.K_5,pg.K_6,pg.K_7,pg.K_8,pg.K_9]
    #Ignore mouse motion and clicks
    pg.event.set_blocked((pg.MOUSEBUTTONUP, pg.MOUSEBUTTONDOWN, pg.MOUSEMOTION))
    print('Pygame initialized')

    #Load images
    global pointer_grey, pointer_red, pointer_blue, ring #, text_timeout
    
    if 'CNBITK_PYTHON_DATA' in os.environ:
        graphics_path = os.environ['CNBITK_PYTHON_DATA']
        print('Looking for graphics in {}'.format(graphics_path))
    else:
        print('CNBITK_PYTHON_DATA not defined - looking for graphics locally')
        graphics_path = 'graphics'
    try:
        #pointer in rest-position
        pointer_grey = pg.image.load(os.path.join(graphics_path, 'ptr.gif'))
        pointer_red = pg.image.load(os.path.join(graphics_path, 'ptr_red.gif'))
        pointer_blue = pg.image.load(os.path.join(graphics_path, 'ptr_blue.gif'))
        #black ring around pointer
        ring = pg.image.load(os.path.join(graphics_path, 'blk_ring.gif'))
        #Time out text
        cnbi_icon = pg.image.load(os.path.join(graphics_path, 'icon0.gif'))
        #Symbols indicating state of robot
        global state_dict
        state_dict = {}
        state_dict['left'] = pg.image.load(os.path.join(graphics_path, 'l_arrow.gif'))
        state_dict['right'] = pg.image.load(os.path.join(graphics_path, 'r_arrow.gif'))
        state_dict['forward'] = pg.image.load(os.path.join(graphics_path, 'circle.gif'))
        state_dict['stop'] = pg.image.load(os.path.join(graphics_path, 'square.gif'))
    except:
        sys.exit('ERROR: could not load grahpics')
    print('Graphics loaded')

    #Open the window
    global maximized_window
    maximized_window = False
    pg.display.set_icon(cnbi_icon)
    make_window(s_width, s_height, 0.5, None)

def empty_bci_stack():
    """consume stack of old BCI TiC values, reset feedback to 0.5
    Should be called directly before feedback is activated"""
    global feedback_running
    if not feedback_running:
        while bci.readTicAllProb() != None :
            pass
        bci.sendTidEvent(evtCFeed)
        feedback_running = True



def wait_for_commnand():
    print("Enter number between 1 and {} to choose task".format(n_tasks))
    while go_on: 
        empty_bci_stack()
        command = handle_events()
        if command in range(1,1+n_tasks) or command == 'exit':
            return command
        elif command in ['0', '1']:
            feedback_update(mode='before_trial', control=command)
        else:
            feedback_update(mode='before_trial')

def prepare_for_trial(command):
    """If a number is pressed, feedback is reset to 0.5, event to start robot sent after t_cue"""
    print("Trial with task {} will start in {}ms.".format(command, t_cue))
    time = pg.time.get_ticks()
    #'Cue'-stage where number is shown and robot does not move yet
    while (pg.time.get_ticks() - time < t_cue):
        empty_bci_stack()
        command0 = handle_events()
        if command0 == 'exit':
            return 'exit'
        elif command0 == 'end trial':
            print("Interrupted - won't start trial")
            return 'end trial'
        elif command0 in ['0', '1']:
            feedback_update(mode='cue', task=command, control=command0)
        else:
            feedback_update(mode='cue', task=command)
    return 'go on'

def trial_stage(task):
    print('Trial starts')
    bci.sendTidEvent(evtTask0+task)
    pg.time.wait(200)
    bci.sendTidEvent(evtCmdResume)
    while go_on:
        if not feedback_running:
            empty_bci_stack()
        command1 = handle_events()
        if command1 == 'exit':
            bci.sendTidEvent(evtTask0+task+evtOff)
            pg.time.wait(200)
            return 'exit'
        elif command1 == 'end trial':
            bci.sendTidEvent(evtTask0+task+evtOff)
            pg.time.wait(200)
            print('Trial ended')
            return 'end trial'
        elif command1 in ['0', '1']:
            feedback_update(mode='in_trial', control=command1)
        else:
            feedback_update(mode='in_trial')



def main():
    global go_on, app, bci, robot_moving, feedback_running
    go_on = True
    #feedback_running indicates if evtCfeed has been sent before or evtCfeed+evtOff so that they always alternate
    feedback_running = False
    robot_moving = False

    app = kl.QtGui.QApplication(kl.sys.argv)
    #Initialize KeyLogger object to communicate with BCI
    try:
        bci = kl.KeyLogger(iploop)
    except:
        sys.exit('ERROR: could not connect to BCI loop')  

    read_xml()
    initialize_program()
    
    while go_on:    
        #empty_bci_stack()
        command = wait_for_commnand()
        if feedback_running:
            bci.sendTidEvent(evtCFeed+evtOff)
            pg.time.wait(200)
        feedback_running = False
        if command == 'exit':
            return
        next_step = prepare_for_trial(command)
        if next_step == 'exit':
            return
        elif next_step == 'end trial':
            continue

        #Actual trial will start
        robot_moving = True
        if trial_stage(command) == 'exit':
            return
        else:
            bci.sendTidEvent(evtCmdPause)
            robot_moving = False
            pg.time.wait(200)
            if feedback_running:
                bci.sendTidEvent(evtCFeed+evtOff)
                pg.time.wait(200)
            feedback_running = False


#call main function
if __name__ == '__main__': main()
