#!/bin/bash

NAME="cp_smrinc_launcher"

DEFAULT_MI_BLOCK="mi"
DEFAULT_MI_TASK="mi_bhbf"

DEFAULT_FEEDBACK_EXECUTABLE="mi_control"

# Make trap for graceful exits
trap 'my_exit; exit' SIGINT SIGTERM SIGQUIT SIGHUP


# Make trap for graceful exits
trap 'my_exit; exit' SIGINT SIGTERM SIGQUIT SIGHUP

my_exit()
{
    cl_rpc closexdf	
    wmctrl -c "Feedback"
	cl_rpc eraseconfig $icomponent $iname
}

usage(){
	printf "\n[$NAME] - Usage: $NAME -x XMLPATH [OPTION]...\n\n"
	printf "	-x 		path of the xml file\n"
	printf "	-i 		integrator type [ema, dynamic, vema]\n"
	printf "	-b 		experiment block 	[Default: 'mi']\n"
	printf "	-t 		experiment taskset 	[Default: 'mi_bhbf']\n"
}

miblock=$DEFAULT_MI_BLOCK
mitask=$DEFAULT_MI_TASK
feedback=$DEFAULT_FEEDBACK_EXECUTABLE

icomponent="integrator"
iname="type"

xflag=false
iflag=false

# Getting optional arguments
while getopts ":t:b:x:i:f:" opt; do
	case $opt in
		t)
			mitask=$OPTARG

			;;
		b)
			miblock=$OPTARG
			;;
		x)
			bcixml=$OPTARG
			xflag=true;
			;;
		i)
			itype=$OPTARG
			iflag=true;
			;;
		f)
			feedback=$OPTARG
			;;
		\?)
			echo "[$NAME] - Invalid option: -$OPTARG" >&2
			usage;
			exit 1
			;;
		:)
			echo "[$NAME] - Option -$OPTARG requires an argument.">&2
			usage;
			exit 1
			;;
	esac
done

if ! $xflag 
then
	echo "[$NAME] - XML filepath must be provided (-x XMLPATH)" >&2
	usage;
    exit 1
fi

if ! $iflag 
then
	echo "[$NAME] - integrator type must be provided (-i {ema, dynamic, vema})" >&2
	usage;
    exit 1
fi


echo "[$NAME] - BCI xml:  	 $bcixml"
echo "[$NAME] - MI block: 	 $miblock"
echo "[$NAME] - MI task:  	 $mitask"
echo "[$NAME] - Integrator:  $itype"
echo "[$NAME] - Feedback:  	 $feedback"

while true; do

	#Kill existing loop instances and close their terminal windows
    wmctrl -c "Feedback"

	sleep 1

	# Upload all parameters to nameserver and start BCI processing
	echo "[$NAME] - Uploading XML parameters to nameserver"
	cl_init -x $bcixml -lN -B $miblock -T $mitask

	# Upload integrator type parameter
	echo "[$NAME] - Uploading integrator parameters to nameserver"
	cl_rpc storeconfig $icomponent $iname $itype
	
	echo "[$NAME] - Opening GDF and log files"
	# Open GDF and log files
	GDFBASENAME=$(ccfg_cli -x $bcixml -N -B $miblock -T $mitask -a)".gdf"
	LOGBASENAME=$(ccfg_cli -x $bcixml -N -B $miblock -T $mitask -o)".log"
	cl_rpc openxdf $GDFBASENAME $LOGBASENAME "smrinc"

	echo "[$NAME] - Starting BCI process"
	BCIPID=$(cl_init -x $bcixml -scN -B $miblock -T $mitask)
	
	sleep 2

	# Launch feedback mi_control
	echo "[$NAME] - Launching $feedback feedback"
	if [ "$feedback" == "mi_control" ]; then
		gnome-terminal -e $feedback --title "Feedback"
	elif [ "$feedback" == "mi_python_control" ]; then
		echo "Not implemented yet"
		my_exit;
	else
		echo "[$NAME] - Uknown feedback executable provided ($feedback)"
		my_exit;
	fi

	sleep 2
	
	# Keep reading user input here until Q is pressed
	while :
	do
	    read -t 1 -n 1 key
	    if [[ $key = q ]]; then
		break
	    fi
	done

	# Close the GDF file
	echo "[$NAME] - Closing GDF file"
	cl_rpc closexdf

	# Terminate MATLAB prcesses
	echo "[$NAME] - Terminating BCI process"
	cl_rpc terminate $BCIPID
	
	# Unload configuration from nameserver
	cl_rpc eraseconfig $icomponent $iname

	# Shut down everything
	echo "[$NAME] - Closing all terminals"
        wmctrl -c "Feedback"
	
	# Ask whether to re-run with same parameters
	zenity --question --text="Do you want to run again with same parameters?" --ok-label="Yes" --cancel-label="No"
	if [[ $? == 0 ]] ; then
	    echo "[$NAME] - Running with the same taskset and commands"
	else
	    echo "Exiting"
	    break
	fi
done
